// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prismabox {
  provider = "prismabox"
  // you can optionally specify the output location. Defaults to ./prismabox
  output = "./prismabox"
  // if you want, you can customize the imported variable name that is used for the schemes. Defaults to "Type" which is what the standard typebox package offers
  typeboxImportVariableName = "Type"
  // you also can specify the dependency from which the above import should happen. This is useful if a package re-exports the typebox package and you would like to use that
  typeboxImportDependencyName = "@sinclair/typebox"
  // by default the generated schemes do not allow additional properties. You can allow them by setting this to true
  additionalProperties = true
  // optionally enable the data model generation. See the data model section below for more info
  inputModel = true
}


// User model
model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  username      String        @unique
  password      String
  name          String?
  profileImage  String?
  isAdmin       Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  playlists     Playlist[]
  likedSongs    LikedSong[]
  reviews       Review[]
  ratings       Rating[]
  friends       Friendship[]  @relation("userFriends")
  friendsOf     Friendship[]  @relation("friendsOfUser")
  wishlist      Wishlist[]
  refreshTokens RefreshToken[]
}

// Artist model
model Artist {
  id            Int           @id @default(autoincrement())
  name          String
  bio           String?       @db.Text
  profileImage  String?
  country       String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  albums        Album[]
  songs         Song[]
  genres        ArtistGenre[]
}

// Album model
model Album {
  id            Int           @id @default(autoincrement())
  title         String
  coverImage    String?
  releaseYear   Int
  type          AlbumType     @default(ALBUM)
  rating        Float         @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  artist        Artist        @relation(fields: [artistId], references: [id])
  artistId      Int
  songs         Song[]
  genres        AlbumGenre[]
  reviews       Review[]
  ratings       Rating[]
}

// Song model
model Song {
  id            Int           @id @default(autoincrement())
  title         String
  duration      Int          // Duration in seconds
  trackNumber   Int
  audioUrl      String
  rating        Float         @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  album         Album         @relation(fields: [albumId], references: [id])
  albumId       Int
  artist        Artist        @relation(fields: [artistId], references: [id])
  artistId      Int
  likedBy       LikedSong[]
  playlists     SongPlaylist[]
  reviews       Review[]
  ratings       Rating[]
  wishlist      Wishlist[]
}

// Playlist model
model Playlist {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?       @db.Text
  coverImage    String?
  isPublic      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  owner         User          @relation(fields: [ownerId], references: [id])
  ownerId       Int
  songs         SongPlaylist[]
}

// Genre model
model Genre {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  artists       ArtistGenre[]
  albums        AlbumGenre[]
}

// Review model
model Review {
  id            Int           @id @default(autoincrement())
  content       String        @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relationships
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  song          Song?         @relation(fields: [songId], references: [id])
  songId        Int?
  album         Album?        @relation(fields: [albumId], references: [id])
  albumId       Int?

  @@unique([userId, songId])
  @@unique([userId, albumId])
}

// Rating model
model Rating {
  id            Int           @id @default(autoincrement())
  score         Int          // Score from 1-5
  createdAt     DateTime      @default(now())
  
  // Relationships
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  song          Song?         @relation(fields: [songId], references: [id])
  songId        Int?
  album         Album?        @relation(fields: [albumId], references: [id])
  albumId       Int?

  @@unique([userId, songId])
  @@unique([userId, albumId])
}

// Wishlist model
model Wishlist {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  song          Song          @relation(fields: [songId], references: [id])
  songId        Int
  addedAt       DateTime      @default(now())

  @@unique([userId, songId])
}

// Friendship model
model Friendship {
  id            Int           @id @default(autoincrement())
  user          User          @relation("userFriends", fields: [userId], references: [id])
  userId        Int
  friend        User          @relation("friendsOfUser", fields: [friendId], references: [id])
  friendId      Int
  status        FriendshipStatus @default(PENDING)
  createdAt     DateTime      @default(now())

  @@unique([userId, friendId])
}

// Junction tables
model SongPlaylist {
  id            Int           @id @default(autoincrement())
  playlist      Playlist      @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId    Int
  song          Song         @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId        Int
  addedAt       DateTime      @default(now())
  order         Int

  @@unique([playlistId, songId])
}

model LikedSong {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  song          Song          @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId        Int
  likedAt       DateTime      @default(now())

  @@unique([userId, songId])
}

model ArtistGenre {
  id            Int           @id @default(autoincrement())
  artist        Artist       @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId      Int
  genre         Genre        @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId       Int

  @@unique([artistId, genreId])
}

model AlbumGenre {
  id            Int           @id @default(autoincrement())
  album         Album        @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId       Int
  genre         Genre        @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId       Int

  @@unique([albumId, genreId])
}

// Enum definitions
enum AlbumType {
  ALBUM
  SINGLE
  EP
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

// RefreshToken model
model RefreshToken {
  id            Int           @id @default(autoincrement())
  token         String        @unique
  userId        Int
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt     DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  revoked       Boolean       @default(false)
}